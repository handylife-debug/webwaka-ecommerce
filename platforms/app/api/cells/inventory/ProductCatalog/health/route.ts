/**
 * ProductCatalog Cell Health Check Endpoint
 * Comprehensive health monitoring for cellular independence compliance
 */

import { NextRequest, NextResponse } from 'next/server';
import { getTenantContext } from '../../../../../../lib/tenant-context';
import { createCellHealthChecker, CommonHealthChecks } from '../../../../../../lib/cell-contracts/health';
import { execute_sql } from '../../../../../../lib/database';
import { redis } from '../../../../../../lib/redis';

/**
 * GET /api/cells/inventory/ProductCatalog/health
 * Returns comprehensive health status following WebWaka health contract standards
 */
export async function GET(request: NextRequest) {
  const requestId = crypto.randomUUID();
  
  try {
    // Get tenant context (optional for health checks but useful for logging)
    let tenantId = '';
    try {
      const tenantContext = await getTenantContext(request);
      tenantId = tenantContext.tenantId;
    } catch {
      // Health check should work even without tenant context
      tenantId = 'system';
    }

    // Create standardized health checker for ProductCatalog
    const healthChecker = createCellHealthChecker(
      'ProductCatalog',
      'inventory',
      '1.0.0'
    );

    // Add ProductCatalog-specific health checks
    
    // 1. Database connectivity check
    healthChecker.addHealthCheck({
      name: 'database_connection',
      description: 'Verify PostgreSQL database connectivity for product data',
      async execute() {
        const startTime = Date.now();
        try {
          // Test basic database connectivity with a simple query
          const result = await execute_sql('SELECT 1 as test_connection');
          const isConnected = result.rows.length > 0;
          
          return {
            status: isConnected ? 'healthy' : 'unhealthy',
            message: isConnected ? 'Database connection successful' : 'Database connection failed',
            duration: Date.now() - startTime,
            metadata: { 
              connectionTest: isConnected,
              query: 'SELECT 1',
              resultCount: result.rows.length
            }
          };
        } catch (error) {
          return {
            status: 'unhealthy',
            message: `Database connection error: ${error instanceof Error ? error.message : 'Unknown error'}`,
            duration: Date.now() - startTime,
            metadata: { error: error instanceof Error ? error.message : 'Unknown error' }
          };
        }
      }
    });

    // 2. Product catalog tables health check
    healthChecker.addHealthCheck({
      name: 'product_catalog_tables',
      description: 'Verify critical ProductCatalog tables are accessible',
      async execute() {
        const startTime = Date.now();
        try {
          // Check key tables exist and are accessible
          const tables = ['inventory_products', 'product_categories', 'product_variants'];
          const tableChecks = await Promise.all(
            tables.map(async (table) => {
              try {
                const result = await execute_sql(`SELECT COUNT(*) as count FROM ${table} LIMIT 1`);
                return { table, accessible: true, count: result.rows[0]?.count || 0 };
              } catch (error) {
                return { 
                  table, 
                  accessible: false, 
                  error: error instanceof Error ? error.message : 'Unknown error' 
                };
              }
            })
          );

          const allAccessible = tableChecks.every(check => check.accessible);
          
          return {
            status: allAccessible ? 'healthy' : 'unhealthy',
            message: allAccessible ? 'All ProductCatalog tables accessible' : 'Some tables inaccessible',
            duration: Date.now() - startTime,
            metadata: { tableChecks, tablesChecked: tables.length }
          };
        } catch (error) {
          return {
            status: 'unhealthy',
            message: `Table accessibility check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,
            duration: Date.now() - startTime
          };
        }
      }
    });

    // 3. Redis cache health check
    healthChecker.addHealthCheck({
      name: 'redis_cache',
      description: 'Verify Redis cache connectivity for product data caching',
      async execute() {
        const startTime = Date.now();
        try {
          // Test Redis connection with a ping
          const testKey = `health_check:${requestId}:${Date.now()}`;
          const testValue = 'product_catalog_health_check';
          
          await redis.set(testKey, testValue, { ex: 60 }); // 1 minute expiry
          const retrievedValue = await redis.get(testKey);
          await redis.del(testKey); // Clean up
          
          const isHealthy = retrievedValue === testValue;
          
          return {
            status: isHealthy ? 'healthy' : 'degraded',
            message: isHealthy ? 'Redis cache operational' : 'Redis cache issues detected',
            duration: Date.now() - startTime,
            metadata: { 
              testKey,
              writeSuccess: true,
              readSuccess: retrievedValue === testValue,
              cleanupSuccess: true
            }
          };
        } catch (error) {
          return {
            status: 'degraded', // Redis issues are not critical for core functionality
            message: `Redis cache error: ${error instanceof Error ? error.message : 'Unknown error'}`,
            duration: Date.now() - startTime,
            metadata: { error: error instanceof Error ? error.message : 'Unknown error' }
          };
        }
      }
    });

    // 4. Currency conversion functionality check
    healthChecker.addHealthCheck({
      name: 'currency_conversion',
      description: 'Verify currency conversion functionality for Nigerian market',
      async execute() {
        const startTime = Date.now();
        try {
          // Test currency conversion logic (using hardcoded rates)
          const EXCHANGE_RATES = {
            'NGN-USD': 0.0012,
            'USD-NGN': 850.0
          };
          
          const testAmount = 1000; // 1000 NGN
          const expectedUSD = testAmount * EXCHANGE_RATES['NGN-USD'];
          const calculatedUSD = testAmount * 0.0012; // Should match
          
          const isWorking = Math.abs(expectedUSD - calculatedUSD) < 0.001;
          
          return {
            status: isWorking ? 'healthy' : 'degraded',
            message: isWorking ? 'Currency conversion functional' : 'Currency conversion issues',
            duration: Date.now() - startTime,
            metadata: { 
              testAmount,
              expectedUSD,
              calculatedUSD,
              conversionWorking: isWorking,
              supportedCurrencies: ['NGN', 'USD', 'GBP']
            }
          };
        } catch (error) {
          return {
            status: 'degraded',
            message: `Currency conversion error: ${error instanceof Error ? error.message : 'Unknown error'}`,
            duration: Date.now() - startTime
          };
        }
      }
    });

    // 5. VAT calculation functionality check
    healthChecker.addHealthCheck({
      name: 'vat_calculation',
      description: 'Verify Nigerian VAT calculation functionality',
      async execute() {
        const startTime = Date.now();
        try {
          // Test VAT calculation (Nigerian standard rate is 7.5%)
          const testAmount = 1000;
          const nigerianVATRate = 0.075;
          const expectedVAT = testAmount * nigerianVATRate;
          const calculatedVAT = testAmount * 0.075;
          
          const isWorking = Math.abs(expectedVAT - calculatedVAT) < 0.001;
          
          return {
            status: isWorking ? 'healthy' : 'degraded',
            message: isWorking ? 'VAT calculation functional' : 'VAT calculation issues',
            duration: Date.now() - startTime,
            metadata: { 
              testAmount,
              nigerianVATRate,
              expectedVAT,
              calculatedVAT,
              vatCalculationWorking: isWorking
            }
          };
        } catch (error) {
          return {
            status: 'degraded',
            message: `VAT calculation error: ${error instanceof Error ? error.message : 'Unknown error'}`,
            duration: Date.now() - startTime
          };
        }
      }
    });

    // Add standard dependencies
    healthChecker.addDependency({
      name: 'postgresql',
      type: 'database',
      status: 'healthy', // Will be checked during health execution
      metadata: { 
        purpose: 'Primary data storage for products, categories, variants',
        criticalTables: ['inventory_products', 'product_categories', 'product_variants']
      }
    });

    healthChecker.addDependency({
      name: 'redis',
      type: 'redis',
      status: 'healthy', // Will be checked during health execution  
      metadata: { 
        purpose: 'Product data caching and session storage',
        criticality: 'medium' // Product catalog can work without Redis
      }
    });

    // Execute comprehensive health check
    const healthResult = await healthChecker.executeHealthCheck();

    console.log(`[ProductCatalog Health] Status: ${healthResult.status} for tenant: ${tenantId}`);

    // Return standardized health response
    return NextResponse.json({
      version: 'v1',
      requestId,
      success: true,
      data: healthResult,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('[ProductCatalog Health] Error:', error);
    
    // Return error response following standard format
    return NextResponse.json({
      version: 'v1',
      requestId,
      success: false,
      error: {
        code: 'HEALTH_CHECK_FAILED',
        message: 'ProductCatalog health check failed',
        details: error instanceof Error ? error.message : 'Unknown error occurred'
      },
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}

/**
 * OPTIONS /api/cells/inventory/ProductCatalog/health
 * CORS preflight for health endpoint
 */
export async function OPTIONS(request: NextRequest) {
  return NextResponse.json({}, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  });
}