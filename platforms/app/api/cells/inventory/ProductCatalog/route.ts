import { NextRequest, NextResponse } from 'next/server';
import { getTenantContext, validateTenantAccess } from '../../../../../lib/tenant-context';
import { cellBus } from '../../../../../cell-sdk/loader/cell-bus';

/**
 * ProductCatalog Cell API Endpoint
 * Handles all product catalog operations with multi-tenant isolation and JWT authentication
 */

// Handle POST requests for ProductCatalog Cell actions
export async function POST(request: NextRequest) {
  try {
    // Get tenant context from request headers/subdomain
    const tenantContext = await getTenantContext(request);
    const { tenantId } = tenantContext;

    // Validate tenant access with authentication
    const hasAccess = await validateTenantAccess(tenantId, request);
    if (!hasAccess) {
      return NextResponse.json({
        success: false,
        error: 'Authentication required or access denied'
      }, { status: 401 });
    }

    // Parse request body
    const body = await request.json();
    const { action, ...payload } = body;

    if (!action) {
      return NextResponse.json({
        success: false,
        error: 'Action is required'
      }, { status: 400 });
    }

    console.log(`[ProductCatalog] Executing action: ${action} for tenant: ${tenantId}`);

    // ✅ CELLULAR INDEPENDENCE: Use Cell Bus instead of direct imports
    console.log(`[ProductCatalog] Routing ${action} through Cell Bus for cellular independence`);
    
    // Enhance payload with tenant context for security
    const enhancedPayload = {
      ...payload,
      tenantId, // Inject tenant context
      requestedAt: new Date().toISOString(),
      source: 'api_gateway'
    };

    let result;
    
    try {
      // ✅ STRICT CELLULAR INDEPENDENCE: Use Cell Bus ONLY - NO FALLBACKS
      result = await cellBus.call('inventory/ProductCatalog', action, enhancedPayload);
    } catch (cellBusError) {
      // 🚨 PRODUCTION-SAFE: No fallback to direct imports - maintain cellular independence
      console.error(`[ProductCatalog] Cell Bus failed for ${action} - cellular independence maintained:`, cellBusError);
      
      return NextResponse.json({
        success: false,
        error: 'Cell communication failed',
        message: 'ProductCatalog cell is temporarily unavailable',
        code: 'CELL_BUS_COMMUNICATION_ERROR',
        action,
        cellId: 'inventory/ProductCatalog',
        retryable: true
      }, { status: 502 });
    }

    // ✅ CELLULAR INDEPENDENCE ACHIEVED: Return result from Cell Bus communication only
    return NextResponse.json({
      ...result,
      metadata: {
        cellId: 'inventory/ProductCatalog',
        action,
        version: '1.0.0',
        tenantId,
        processedAt: new Date().toISOString(),
        cellularIndependence: true,
        communicationMethod: 'cell_bus',
        fallbacksDisabled: true
      }
    });

  } catch (error) {
    console.error('[ProductCatalog API] Error:', error);

    // Return structured error response
    return NextResponse.json({
      success: false,
      error: 'ProductCatalog service error',
      message: error instanceof Error ? error.message : 'Unknown error occurred',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}

// Handle GET requests for ProductCatalog Cell metadata and health
export async function GET(request: NextRequest) {
  try {
    // Get tenant context from request headers/subdomain
    const tenantContext = await getTenantContext(request);
    const { tenantId } = tenantContext;

    // Validate tenant access with authentication
    const hasAccess = await validateTenantAccess(tenantId, request);
    if (!hasAccess) {
      return NextResponse.json({
        success: false,
        error: 'Authentication required or access denied'
      }, { status: 401 });
    }

    // Return cell metadata and health status
    return NextResponse.json({
      success: true,
      cell: {
        id: 'inventory/ProductCatalog',
        name: 'ProductCatalog',
        sector: 'inventory',
        version: '1.0.0',
        description: 'Comprehensive product catalog management for Nigerian businesses',
        status: 'active',
        capabilities: {
          multiCurrency: true,
          bulkPricing: true,
          vatCompliance: true,
          unitConversions: true,
          variantManagement: true,
          categoryHierarchy: true,
          nigerianMarketFeatures: true
        },
        supportedCurrencies: ['NGN', 'USD', 'GBP'],
        supportedActions: [
          'createProduct', 'updateProduct', 'getProduct', 'searchProducts',
          'createCategory', 'getCategoryHierarchy',
          'createVariant', 'getProductVariants',
          'convertCurrency', 'calculateVAT', 'generateSKU'
        ]
      },
      tenantId,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('[ProductCatalog API] GET Error:', error);

    return NextResponse.json({
      success: false,
      error: 'Failed to get ProductCatalog cell information',
      message: error instanceof Error ? error.message : 'Unknown error occurred'
    }, { status: 500 });
  }
}